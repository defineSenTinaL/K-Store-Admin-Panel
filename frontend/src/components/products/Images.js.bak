// const imageKit = new ImageKit({
//     publicKey: process.env.REACT_IMAGEKIT_PUBLIC_KEY,
//     urlEndpoint: process.env.REACT_IMAGEKIT_URL_ENDPOINT,
//     authenticationEndpoint: process.env.REACT_IMAGEKIT_AUTH_ENDPOINT,
//   });

// const imageKit = new ImageKit({
//     publicKey: "public_xL5mD9kBclemQcQwc/RQV5R04qY=",
//     urlEndpoint: "https://ik.imagekit.io/dintly",
//     authenticationEndpoint: "http://localhost:5000/images/auth",
//   });



// Cloudinary
// import React, { useState } from 'react';
// import { Image } from 'cloudinary-react';
// import axios from 'axios';

// const ImageUpload = ({ onUploadComplete }) => {
//   const [images, setImages] = useState([]);

//   const handleImageChange = (e) => {
//     const files = e.target.files;
//     const imageArray = [];

//     for (let i = 0; i < files.length; i++) {
//       const formData = new FormData();
//       formData.append('file', files[i]);
//       formData.append('upload_preset', 'kumavat');
//       formData.append('cloud_name', 'dq4toulpx');

//       axios.post('https://api.cloudinary.com/v1_1/dq4toulpx/image/upload', formData)
//         .then((res) => {
//           console.log(res);
//           imageArray.push(res.data.url);
//           if (imageArray.length === files.length) {
//             setImages(imageArray);
//             onUploadComplete(imageArray); // Pass the URLs to the parent component
//           }
//         })
//         .catch((err) => {
//           console.error('Error uploading image:', err);
//         });
//     }
//   };

//   return (
//     <div>
//       <input type="file" multiple onChange={handleImageChange} />
//       <div>
//         {images.map((url, index) => (
//           <Image key={index} cloudName="your_cloud_name" publicId={url} width="300" crop="scale" />
//         ))}
//       </div>
//     </div>
//   );
// };

// export default ImageUpload;




// import { Upload } from "antd";
// import React, { useState } from "react";
// import Resizer from 'react-image-file-resizer';

// const Images = ({ onSubmit }) => {
//   const [fileList, setFileList] = useState([]);
//   const [isResizing, setIsResizing] = useState(false);

//   const onChange = async ({ fileList }) => {
//     setIsResizing(true);

//     const resizedFileList = await Promise.all(
//       fileList.map(async (file) => {
//         const resizedFile = await resizeImage(file.originFileObj);
//         return {
//           ...file,
//           originFileObj: resizedFile,
//           thumbUrl: URL.createObjectURL(resizedFile),
//         };
//       })
//     );

//     setIsResizing(false);
//     setFileList(resizedFileList);
//     console.log(resizedFileList);
//     onSubmit(resizedFileList); // Pass the resizedFileList to the onSubmit callback
//   };

//   const resizeImage = (file) => {
//     return new Promise((resolve) => {
//       Resizer.imageFileResizer(
//         file,
//         720, // Adjust the maximum width as needed
//         720, // Adjust the maximum height as needed
//         'JPEG', // Output format ('JPEG', 'PNG', or 'WEBP')
//         100, // Compression quality (0-100)
//         0, // Rotation (0, 90, 180, or 270)
//         (resizedFile) => {
//           resolve(resizedFile);
//         },
//         'file', // Output type ('file', 'blob', or 'base64')
//         200, // Max file size (in KB) for base64 output type (optional)
//         200 // Max width (in pixels) for base64 output type (optional)
//       );
//     });
//   };

//   return (
//     <>
//       <Upload
//         listType="picture-card"
//         fileList={fileList}
//         onChange={onChange}
//         multiple // Enable multiple file upload
//       >
//         {isResizing ? "Uploading..." : fileList.length < 6 && "+ Upload"}
//       </Upload>
//     </>
//   );
// };

// export default Images;

// import React, { useState } from "react";
// import ImageKit from "imagekit-javascript";
// import { PlusOutlined } from "@ant-design/icons";
// import { Modal, Upload, Button, message, Input } from "antd";
// import axios from "axios";

// const getBase64 = (file) =>
//   new Promise((resolve, reject) => {
//     const reader = new FileReader();
//     reader.readAsDataURL(file);
//     reader.onload = () => resolve(reader.result);
//     reader.onerror = (error) => reject(error);
//   });

// const ImageUpload = ({ onSubmit }) => {
//   const [previewOpen, setPreviewOpen] = useState(false);
//   const [previewImage, setPreviewImage] = useState("");
//   const [previewTitle, setPreviewTitle] = useState("");
//   const [fileList, setFileList] = useState([]);

//   const [folderName, setFolderName] = useState(""); // State to store the user-provided folder name

//   const handleFolderNameChange = (e) => {
//     setFolderName(e.target.value);
//   };

//   const onUploadSuccess = (result) => {
//     console.log(result);
//     // const { url, fileId } = result;
//     setFileList((prevFileList) => [
//       ...prevFileList,
//       {
//         uid: `-${Date.now()}`, // Generate a unique uid for each uploaded file
//         name: result.name,
//         status: "done",
//         url: result.url,
//         fileId: result.fileId,
//       },
//     ]);
//     //console.log("Image uploaded successfully: ", url, fileId);
//   };

//   const customRequest = async ({ file, onSuccess, onError }) => {
//     // Prepare and upload the file using ImageKit
//     try {
//       const imageKit = new ImageKit({
//         publicKey: "public_xL5mD9kBclemQcQwc/RQV5R04qY=",
//         urlEndpoint: "https://ik.imagekit.io/dintly",
//         authenticationEndpoint: "http://localhost:5000/images/auth",
//       });

//       const result = await imageKit.upload({
//         file: file,
//         fileName: file.name,
//         folder: folderName,
//       });

//       onUploadSuccess(result);
//       onSuccess({ fileId: result.fileId, url: result.url });
//     } catch (error) {
//       console.error("Image upload failed:", error);
//       onError();
//     }
//   };

//   const handleCancel = () => setPreviewOpen(false);
//   const handlePreview = async (file) => {
//     if (!file.url && !file.preview) {
//       file.preview = await getBase64(file.originFileObj);
//     }
//     setPreviewImage(file.url || file.preview);
//     setPreviewOpen(true);
//     setPreviewTitle(
//       file.name || file.url.substring(file.url.lastIndexOf("/") + 1)
//     );
//   };

//   const handleChange = ({ fileList: newFileList }) => setFileList(newFileList);

//   // Function to handle further processing, you can pass the imageUrls to another component here
//   const handleProcessing = () => {
//     const imageDetails = fileList.map((file) => {
//       console.log(file);
//       return {
//         url: file.response.url,
//         fileId: file.response.fileId,
//       };
//     });

//     onSubmit(imageDetails);
//   };

//   const handleRemove = async (file) => {
//     console.log(file);
//     try {
//       const deleteEndpoint = `http://localhost:5000/images/${file.response.fileId}`;
//       //console.log(file.response.fileId);

//       const response = await axios.delete(deleteEndpoint);

//       if (response.status === 200) {
//         setFileList((prevFileList) =>
//           prevFileList.filter((item) => item.uid !== file.uid)
//         );
//         message.success("Image deleted successfully.");
//       } else {
//         console.error("Image deletion failed:", response.statusText);
//         message.error("Image deletion failed.");
//       }
//     } catch (error) {
//       console.error("Image deletion failed:", error);
//       message.error("Image deletion failed.");
//     }
//   };

//   const uploadButton = (
//     <div>
//       <PlusOutlined />
//       <div style={{ marginTop: 8 }}>Upload</div>
//     </div>
//   );

//   return (
//     <>
//       <Upload
//         customRequest={customRequest}
//         listType="picture-card"
//         fileList={fileList}
//         onPreview={handlePreview}
//         onChange={handleChange}
//         onRemove={handleRemove}
//       >
//         {fileList.length >= 8 ? null : uploadButton}
//       </Upload>
//       <Modal
//         open={previewOpen}
//         title={previewTitle}
//         footer={null}
//         onCancel={handleCancel}
//       >
//         <img alt="example" style={{ width: "100%" }} src={previewImage} />
//       </Modal>
//       <Button onClick={handleProcessing}>Save URLs</Button>

//       <br/>
//       <br/>
//       <br/>
//       <Input
//           placeholder="Product Folder Name"
//           value={folderName}
//           onChange={handleFolderNameChange}
//         />
//     </>
//   );
// };

// export default ImageUpload;

// // import React, { useState } from "react";
// // import ImageKit from "imagekit-javascript";
// // import { PlusOutlined } from "@ant-design/icons";
// // import { Modal, Upload, Button, message, Popconfirm } from "antd";
// // import axios from "axios";

// // const getBase64 = (file) =>
// //   new Promise((resolve, reject) => {
// //     const reader = new FileReader();
// //     reader.readAsDataURL(file);
// //     reader.onload = () => resolve(reader.result);
// //     reader.onerror = (error) => reject(error);
// //   });

// // const ImageUpload = ({ handleImageUrls }) => {
// //   const [previewOpen, setPreviewOpen] = useState(false);
// //   const [previewImage, setPreviewImage] = useState("");
// //   const [previewTitle, setPreviewTitle] = useState("");
// //   const [fileList, setFileList] = useState([]);

// //   const onUploadSuccess = (result) => {
// //     const { url, fileId } = result;
// //     setFileList((prevFileList) => [
// //       ...prevFileList,
// //       {
// //         uid: `-${Date.now()}`, // Generate a unique uid for each uploaded file
// //         name: result.name,
// //         status: "done",
// //         url: url,
// //         fileId: fileId,
// //       },
// //     ]);
// //     console.log("Image uploaded successfully: ", url);
// //   };

// //   const customRequest = async ({ file, onSuccess, onError }) => {
// //     // Prepare and upload the file using ImageKit
// //     try {
// //       const imageKit = new ImageKit({
// //         publicKey: "public_xL5mD9kBclemQcQwc/RQV5R04qY=",
// //         urlEndpoint: "https://ik.imagekit.io/dintly",
// //         authenticationEndpoint: "http://localhost:5000/images/auth",
// //       });

// //       const result = await imageKit.upload({
// //         file: file,
// //         fileName: file.name,
// //       });
// //       //console.log(result);
// //       onUploadSuccess(result);

// //       handleRemove(result);
// //       // Include the response with the uploaded image's URL in the custom upload request
// //       onSuccess({
// //         url: result.url,
// //       });
// //     } catch (error) {
// //       console.error("Image upload failed:", error);
// //       onError();
// //     }
// //   };

// //   const handleCancel = () => setPreviewOpen(false);
// //   const handlePreview = async (file) => {
// //     if (!file.url && !file.preview) {
// //       file.preview = await getBase64(file.originFileObj);
// //     }
// //     setPreviewImage(file.url || file.preview);
// //     setPreviewOpen(true);
// //     setPreviewTitle(
// //       file.name || file.url.substring(file.url.lastIndexOf("/") + 1)
// //     );
// //   };

// //   const handleRemove = async (file) => {
// //     try {
// //       const deleteEndpoint = `http://localhost:5000/images/${file.fileId}`;

// //       const response = await axios.delete(deleteEndpoint);

// //       if (response.status === 200) {
// //         setFileList((prevFileList) =>
// //           prevFileList.filter((item) => item.uid !== file.uid)
// //         );
// //         message.success("Image deleted successfully.");
// //       } else {
// //         console.error("Image deletion failed:", response.statusText);
// //         message.error("Image deletion failed.");
// //       }
// //     } catch (error) {
// //       console.error("Image deletion failed:", error);
// //       message.error("Image deletion failed.");
// //     }
// //   };

// //   const handleChange = ({ fileList: newFileList }) => setFileList(newFileList);

// //   // Function to handle further processing, you can pass the imageUrls to another component here
// //   const handleProcessing = () => {
// //     const imageUrls = fileList.map((file) => file.url);
// //     handleImageUrls(imageUrls);
// //   };

// //   const uploadButton = (
// //     <div>
// //       <PlusOutlined />
// //       <div style={{ marginTop: 8 }}>Upload</div>
// //     </div>
// //   );

// //   return (
// //     <>
// //       <Upload
// //         customRequest={customRequest}
// //         listType="picture-card"
// //         fileList={fileList}
// //         onPreview={handlePreview}
// //         onChange={handleChange}
// //         onRemove={handleRemove}
// //       >
// //         {fileList.length >= 8 ? null : uploadButton}
// //       </Upload>
// //       <Modal
// //         open={previewOpen}
// //         title={previewTitle}
// //         footer={null}
// //         onCancel={handleCancel}
// //       >
// //         <img alt="example" style={{ width: "100%" }} src={previewImage} />
// //       </Modal>
// //       <Button onClick={handleProcessing}>Process Images</Button>
// //     </>
// //   );
// // };

// // export default ImageUpload;

